import os
import shutil
import uuid
import logging
import tempfile
from pathlib import Path
import json

from fastapi import FastAPI, HTTPException, Request # Request is needed for the catch-all route
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, HTMLResponse
from starlette.middleware.cors import CORSMiddleware

# Import the API router
from api import routes as api_routes # Assuming api/__init__.py exists

# --- Configuration ---
BASE_DIR = Path(__file__).resolve().parent

# --- IMPORTANT CHANGE FOR REACT/VITE ---
# The frontend root is now the 'dist' directory, which is the output of the Vite build process.
FRONTEND_BUILD_DIR = BASE_DIR / "frontend" / "dist"
# The static assets (JS, CSS, images) generated by Vite are typically in an 'assets' subfolder.
FRONTEND_ASSETS_DIR = FRONTEND_BUILD_DIR / "assets"

DOWNLOADS_ROOT_DIR = BASE_DIR / "downloads"
TEMP_BASE_DIR = Path(tempfile.gettempdir()) / "er2backend_runs_v3"

# --- Logging Setup ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
logger = logging.getLogger(__name__)

# --- Application Initialization ---
app = FastAPI(
    title="Visual DB Schema to Backend API (React SPA Backend)", 
    version="2.0.0",
    description="Generates backend code from a visually designed schema provided by a React frontend."
)

# --- Store configurations in app.state for access in route handlers ---
app.state.TEMP_BASE_DIR = TEMP_BASE_DIR
app.state.DOWNLOADS_ROOT_DIR = DOWNLOADS_ROOT_DIR
app.state.FRONTEND_BUILD_DIR = FRONTEND_BUILD_DIR


# --- Middleware ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], # In production, restrict this to your frontend's domain
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Directory Setup ---
def setup_directories():
    """Ensure required backend directories exist. The frontend/dist is created by Vite."""
    try:
        DOWNLOADS_ROOT_DIR.mkdir(parents=True, exist_ok=True)
        TEMP_BASE_DIR.mkdir(parents=True, exist_ok=True)
        logger.info(f"Downloads directory: {DOWNLOADS_ROOT_DIR}")
        logger.info(f"Base temporary directory for runs: {TEMP_BASE_DIR}")
        # We no longer create css/js directories here.
        # Check if the frontend build directory exists to provide a helpful startup message.
        if not FRONTEND_BUILD_DIR.exists() or not FRONTEND_ASSETS_DIR.exists():
            logger.warning("--- FRONTEND NOT FOUND ---")
            logger.warning(f"The frontend build directory ('{FRONTEND_BUILD_DIR}') was not found.")
            logger.warning("Please run 'npm install' and 'npm run build' inside the 'frontend' directory.")
            logger.warning("--------------------------")
            
    except OSError as e:
        logger.error(f"Error creating directories: {e}", exc_info=True)
        raise

setup_directories()

@app.on_event("startup")
async def startup_event():
    logger.info("Application startup: Serving a React SPA and API.")
    logger.info(f"API routes are loaded from api.routes module and prefixed with /api")

# --- Include API Routes with a Prefix ---
# CRITICAL: All API routes are now prefixed with '/api' to distinguish them
# from frontend client-side routes.
app.include_router(api_routes.router, prefix="/api") 

# --- Mount Static Files for React App ---
# This serves the built JavaScript, CSS, images, etc. from the 'dist/assets' directory.
# A request to `http://.../assets/index-*.js` will serve `frontend/dist/assets/index-*.js`.
app.mount("/assets", StaticFiles(directory=FRONTEND_ASSETS_DIR), name="static-assets")

# --- Catch-All Route to Serve the React App ---
# This is the key to serving a Single-Page Application (SPA).
# It catches any path that hasn't been matched by the API routes or the static file mount.
# This allows client-side routing (e.g., React Router) to handle paths like '/dashboard' or '/settings'.
@app.get("/{full_path:path}", response_class=HTMLResponse, include_in_schema=False)
async def serve_react_app(request: Request, full_path: str):
    """
    Serves the main index.html for any non-API, non-static path.
    This allows the React app to handle its own routing.
    """
    index_path = request.app.state.FRONTEND_BUILD_DIR / "index.html"
    if not index_path.is_file():
        logger.error(f"React build file 'index.html' not found at '{index_path}'.")
        # Return a helpful message to the user in the browser.
        return HTMLResponse(
            content="""
            <html>
                <body>
                    <h1>Frontend Not Found</h1>
                    <p>The compiled React application (index.html) was not found.</p>
                    <p>Please ensure you have run the build command (e.g., <code>npm run build</code>) in the <code>/frontend</code> directory.</p>
                </body>
            </html>
            """,
            status_code=404,
        )
    return FileResponse(index_path)

# Note: The health check is now at /api/health because we prefixed the router.
# You could add a root health check here if desired.
@app.get("/health", include_in_schema=False)
def root_health_check():
    return {"status": "ok", "message": "Backend server is running."}


if __name__ == "__main__":
    import uvicorn
    logger.info("Starting Uvicorn server for React SPA and API Backend (http://localhost:8000)...")
    uvicorn.run("engine:app", host="0.0.0.0", port=8000, reload=True, reload_dirs=["."])
